import logging
from fastapi import FastAPI, Request
from opentelemetry import trace
from opentelemetry.instrumentation.fastapi import FastAPIInstrumentor
from opentelemetry.instrumentation.logging import LoggingInstrumentor
from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
from opentelemetry.sdk.resources import SERVICE_NAME, Resource
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import BatchSpanProcessor
from opentelemetry.exporter.otlp.proto.grpc._log_exporter import OTLPLogExporter
from opentelemetry.sdk._logs import LoggerProvider, LoggingHandler
from opentelemetry.sdk._logs.export import BatchLogRecordProcessor

service_name = "users-api"
resource = Resource.create({SERVICE_NAME: service_name})

# Configure tracing
tracer_provider = TracerProvider(resource=resource)
tracer_provider.add_span_processor(BatchSpanProcessor(
    OTLPSpanExporter(endpoint="otel-collector:4317", insecure=True)
))
trace.set_tracer_provider(tracer_provider)

# Configure logging
logger_provider = LoggerProvider(resource=resource)
logger_provider.add_log_record_processor(BatchLogRecordProcessor(
    OTLPLogExporter(endpoint="otel-collector:4317", insecure=True)
))

logger = logging.getLogger(service_name)
logger.addHandler(LoggingHandler(logger_provider=logger_provider))

app = FastAPI(title=service_name)
LoggingInstrumentor().instrument()
FastAPIInstrumentor.instrument_app(app)

@app.middleware("http")
async def add_correlation_id(request: Request, call_next):
    trace_id = trace.get_current_span().get_span_context().trace_id
    request.state.trace_id = f"{trace_id:032x}"
    response = await call_next(request)
    response.headers["X-Trace-ID"] = request.state.trace_id
    return response

@app.get("/users/{user_id}")
async def get_user(user_id: int, request: Request):
    with trace.get_tracer(service_name).start_as_current_span("get_user") as span:
        span.set_attribute("user.id", user_id)
        logger.info(f"Retrieving user {user_id}",
                   extra={"trace_id": request.state.trace_id})
        return {
            "id": user_id,
            "name": f"User {user_id}",
            "email": f"user{user_id}@example.com"
        }
